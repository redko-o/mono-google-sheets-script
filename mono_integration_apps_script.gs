/**
 * @OnlyCurrentDoc
 */

function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('üò∫ Mono Menu')
    .addItem('üí≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó', 'uploadAllTransactions')
    .addItem('üìÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥...', 'uploadTransactionsForCustomPeriod')
    .addItem('üìÉ –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞', 'applyRulesToTransactions')
    .addItem('‚ùóÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏/–ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—á–∫—É', 'initialCreate')
    .addToUi();
}

const MONO_TOKEN = getScriptSecret("MONO_TOKEN")
const jsonString = HtmlService.createHtmlOutputFromFile("mcc.html").getContent();
const jsonObject = JSON.parse(jsonString);

let columns = [
  "–î–∂–µ—Ä–µ–ª–æ", "–ë–∞–ª–∞–Ω—Å","–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–û–ø–∏—Å",
  "–ö–æ–º–µ–Ω—Ç–∞—Ä", "MCC", "Original MCC", "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó","–ö–µ—à–±–µ–∫"
]

let columnsWidths = [85, 75, 80, 75, 140, 150, 100, 75, 75, 120, 70]

let floatColumns = ["–ë–∞–ª–∞–Ω—Å", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–ö–µ—à–±–µ–∫"]
let textColumns = ["–û–ø–∏—Å", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]
let datetimeColumns = ["–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"]

let categories = [
  "üí∏ –ë–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏", "üíÖ –ö—Ä–∞—Å–∞ —ñ –∑–¥–æ—Ä–æ–≤ º—è", "üíÉ –í—ñ–¥–ø—É—Å—Ç–∫–∞", "üëµüèª –ë–∞—Ç—å–∫–∏", "‚öΩÔ∏è –•–æ–±—ñ",
  "üéì –ù–∞–≤—á–∞–Ω–Ω—è —ñ –æ—Å–≤—ñ—Ç–∞", "ü™ñ –ü–µ—Ä–µ–º–æ–≥–∞", "üì¶ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—á–µ–π", "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏",
  "üé° –î–æ–∑–≤—ñ–ª–ª—è", "üí∞–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üçã –î–æ—Ö—ñ–¥", "üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–Ü–Ω—à–µ"
]

let sources = ["Mono", "Mono –±—ñ–ª–∞", "–ì–æ—Ç—ñ–≤–∫–∞"]

// –î–æ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –∑ –æ–±–æ–º–∞ —Ä–∞—Ö—É–Ω–∫–∞–º–∏
const accounts = [
    { account: 'MONO_BLACK', source: 'Mono' },      // –û—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
    { account: 'MONO_WHITE', source: 'Mono –±—ñ–ª–∞' }  // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫
];

function getRules(sheetName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const rulesSheet = ss.getSheetByName(sheetName);

  if (!rulesSheet) {
    throw new Error(`–í–∫–ª–∞–¥–∫—É '${sheetName}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
  }

  const rulesData = rulesSheet.getDataRange().getValues();
  const headers = rulesData.shift(); // Remove headers
  const ruleFieldNameIdx = headers.indexOf("–ù–∞–∑–≤–∞ –ø–æ–ª—è");
  const ruleValueIdx = headers.indexOf("–ó–Ω–∞—á–µ–Ω–Ω—è");
  const ruleThenIdx = headers.indexOf("–¢–æ–¥—ñ");
  const ruleEqualsIdx = headers.indexOf("–î–æ—Ä—ñ–≤–Ω—é—î");

  if ([ruleFieldNameIdx, ruleValueIdx, ruleThenIdx, ruleEqualsIdx].includes(-1)) {
    throw new Error("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ '–ù–∞–∑–≤–∞ –ø–æ–ª—è', '–ó–Ω–∞—á–µ–Ω–Ω—è', '–¢–æ–¥—ñ', '–î–æ—Ä—ñ–≤–Ω—é—î'.");
  }

  return { rules: rulesData, indices: { ruleFieldNameIdx, ruleValueIdx, ruleThenIdx, ruleEqualsIdx } };
}

function applyRulesToTransactionsData(transactions, transactionHeaders, rules, ruleIndices) {
  for (let i = 0; i < transactions.length; i++) {
    let transaction = transactions[i];

    for (let j = 0; j < rules.length; j++) {
      const rule = rules[j];

      const fieldIndex = transactionHeaders.indexOf(rule[ruleIndices.ruleFieldNameIdx]);
      const thenFieldIndex = transactionHeaders.indexOf(rule[ruleIndices.ruleThenIdx]);
      if (fieldIndex === -1 || thenFieldIndex === -1) {
        Logger.log(`–ü–æ–ª–µ ${rule[ruleIndices.ruleFieldNameIdx]} –∞–±–æ ${rule[ruleIndices.ruleThenIdx]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –ø–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      }

      if (transaction[fieldIndex]?.toString().includes(rule[ruleIndices.ruleValueIdx])) {
        transaction[thenFieldIndex] = rule[ruleIndices.ruleEqualsIdx];
        Logger.log(`–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: ${rule[ruleIndices.ruleFieldNameIdx]} -> ${rule[ruleIndices.ruleThenIdx]}`);
      }
    }
  }
  return transactions;
}

function applyRulesToTransactions() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const transactionsSheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");

    if (!transactionsSheet) {
      throw new Error("–í–∫–ª–∞–¥–∫—É '–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    }

    const transactionsData = transactionsSheet.getDataRange().getValues();
    const transactionHeaders = transactionsData.shift(); // Remove headers

    const { rules, indices } = getRules("–ü—Ä–∞–≤–∏–ª–∞");

    const updatedTransactions = applyRulesToTransactionsData(transactionsData, transactionHeaders, rules, indices);

    // –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É —Ç–∞–±–ª–∏—Ü—é
    transactionsSheet.getRange(2, 1, updatedTransactions.length, updatedTransactions[0].length).setValues(updatedTransactions);
    SpreadsheetApp.getUi().alert("–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π!");
  } catch (e) {
    SpreadsheetApp.getUi().alert(`–ü–æ–º–∏–ª–∫–∞: ${e.message}`);
  }
}

function initialCreate() {
  // create new sheet
  let ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó";

  let oldSheet = ss.getSheetByName(sheetName);
  if (oldSheet) {
    ss.deleteSheet(oldSheet);
  }

  let newSheet = ss.insertSheet(sheetName, 0); // Creates a new sheet at the beginning of the spreadsheet

  // Add header row with filters
  let headerRowRange = newSheet.getRange(1, 1, 1, columns.length);
  headerRowRange.setValues([columns]);
  headerRowRange.setFontWeight("bold");
  newSheet.setFrozenRows(1); // Freeze the header row

  let maxRows = newSheet.getMaxRows();
  let lastColumn = newSheet.getLastColumn();
  // Apply filters
  let dataRange = newSheet.getDataRange();
  dataRange.createFilter();

  // apply color schema
  let range = newSheet.getRange(1, 1, maxRows, lastColumn);
  range.applyRowBanding(SpreadsheetApp.BandingTheme.YELLOW);

  for (const [index, width] of columnsWidths.entries()) {
    newSheet.setColumnWidth(index + 1, width);
  }

  range.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);

  // apply data types
  // drop down for source
  let sourceColumnIndex = columns.indexOf("–î–∂–µ—Ä–µ–ª–æ") + 1;
  let sourceColumn = newSheet.getRange(2, sourceColumnIndex, maxRows); // start from 2 to ignore header
  let sourceRule = SpreadsheetApp.newDataValidation().requireValueInList(sources).build();
  sourceColumn.setDataValidation(sourceRule);

  // drop down for categories
  let catColumnIndex = columns.indexOf("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è") + 1;
  let catColumn = newSheet.getRange(2, catColumnIndex, maxRows); // start from 2 to ignore header
  let catRule = SpreadsheetApp.newDataValidation().requireValueInList(categories).build();
  catColumn.setDataValidation(catRule);

  //Color RED for category "–Ü–Ω—à–µ"
  let range1 = newSheet.getRange("E:E");
  let catRuleFormat = SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo("–Ü–Ω—à–µ")
    .setBackground("#F5CBCC").setRanges([range1]).build();
  const rules = newSheet.getConditionalFormatRules();
  rules.push(catRuleFormat);
  newSheet.setConditionalFormatRules(rules);

  // set datatypes 
  applyFormating(floatColumns, newSheet, "#,##0.00");
  applyFormating(textColumns, newSheet, "@")
  applyFormating(datetimeColumns, newSheet, "dd.mm.yyyy, HH:mm");
}

function applyFormating(columnsToApply, sheet, format) {
  let ranges = columnsToApply.map(column => {
    let columnIndex = columns.indexOf(column) + 1;
    let columnRange = sheet.getRange(1, columnIndex, sheet.getMaxRows(), 1);
    return columnRange;
  });
  ranges.map(range => { range.setNumberFormat(format); });
}

function getCategoryNameByMCC(mcc) {
  const match = jsonObject.find(item => item.mcc === mcc.toString());
  return match ? match.shortDescription.uk : "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞";
}

var lastApiRequest;

function uploadAllTransactions() {
  let ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
  var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –æ–¥–∏–Ω —Ä–∞–∑
  const { rules, indices } = getRules("–ü—Ä–∞–≤–∏–ª–∞");
  
  let to = Date.now();
  let from = getLatestTransactionTs() + 1001;
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ä–∞—Ö—É–Ω–∫—É
  accounts.forEach(({ account, source }) => {
    Logger.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É: ${source}`);
    
    let periods = getTimePeriods(from, to);
    
    periods.forEach(([periodFrom, periodTo]) => {
      let transactions = getTransactions(account, periodFrom, periodTo);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
      for (let step = transactions.length - 1; step >= 0; step--) {
        let transaction = transactions[step];
        transaction.source = source; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –¥–∂–µ—Ä–µ–ª–æ
        
        // –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        let entry = headers.map(col => {
          if (col === "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó") {
            return getCategoryNameByMCC(transaction.mcc);
          } else {
            return transaction.columnMap().get(col);
          }
        });
        
        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ –æ–¥–Ω—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        let updatedEntry = applyRulesToTransactionsData(
          [entry], // –º–∞—Å–∏–≤ –∑ –æ–¥–Ω—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
          headers,
          rules,
          indices
        )[0]; // –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π (—ñ —î–¥–∏–Ω–∏–π) –µ–ª–µ–º–µ–Ω—Ç
        
        // –®—É–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        let insertPosition = 2;
        let currentData = sheet.getDataRange().getValues();
        currentData.shift(); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        let timestampIndex = headers.indexOf("–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
        let transactionDate = new Date(transaction.time);
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        while (insertPosition - 1 < currentData.length) {
          let currentRowDate = new Date(currentData[insertPosition - 2][timestampIndex]);
          if (transactionDate > currentRowDate) {
            break;
          }
          insertPosition++;
        }
        
        // –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        sheet.insertRowBefore(insertPosition);
        sheet.getRange(insertPosition, 1, 1, updatedEntry.length).setValues([updatedEntry]);
      }
    });
  });
  
  SpreadsheetApp.getUi().alert("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!");
}

function getLatestTransactionTs() {
  Logger.info("–û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
  let ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
  let transactionsTable = sheet.getDataRange().getValues();
  let headers = transactionsTable.shift();

  let timestampIndex = headers.indexOf("–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");

  var from = 0;
  // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
  for (let step = 0; step < transactionsTable.length; step++) {
    let transactionTsCell = transactionsTable[step][timestampIndex]
    if (!transactionTsCell) { continue }

    let transactionTs = transactionTsCell.valueOf()
    if (transactionTs > from) {
      from = transactionTs;
      Logger.info(`–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${new Date(from).toISOString()}`);
      break;
    }
  }
  // —è–∫—â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ú–æ–Ω–æ —â–µ –Ω–µ –±—É–ª–æ, —Ç–æ –±–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
  if (from == 0) {
    let lastMonth = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000)).getTime();
    Logger.info(`–û—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤ ${lastMonth}`);
    from = lastMonth;
  }
  return from;
}

function getTimePeriods(fromRaw, toRaw) {
  // swap if needed
  let [from, to] = fromRaw < toRaw ? [fromRaw, toRaw] : [toRaw, fromRaw];

  Logger.info(`–†–æ–∑–±–∏–≤–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ (${new Date(from).toISOString()}, ${new Date(to).toISOString()}) –Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ –Ω–µ –±—ñ–ª—å—à—ñ –∑–∞ 31 –¥–æ–±—É + 1 –≥–æ–¥–∏–Ω—É (2682000 —Å–µ–∫—É–Ω–¥)`);
  // "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å, –∑–∞ —è–∫–∏–π –º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∏—Å–∫—É ‚Äî 31 –¥–æ–±–∞ + 1 –≥–æ–¥–∏–Ω–∞ (2682000 —Å–µ–∫—É–Ω–¥)" (c) –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
  const maxPeriodMillis = 2682000 * 1000;
  const oneDayMillis = 24 * 60 * 60 * 1000;

  var chunks = [];
  
  // —è–∫—â–æ –ø–µ—Ä—ñ–æ–¥ –º–µ–Ω—à–∏–π –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π
  if (to - from < maxPeriodMillis) {
    chunks.push([from, to]);
  } else {
    // —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏
    let chunkFrom = from;
    while (chunkFrom < to) {
      let chunkTo = Math.min(chunkFrom + maxPeriodMillis - oneDayMillis, to);
      chunks.push([chunkFrom, chunkTo]);
      chunkFrom = chunkTo + 1; // –î–æ–¥–∞—î–º–æ 1 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è
    }
  }

  let prettyChunks = chunks.map(([from, to]) => [new Date(from).toISOString(), new Date(to).toISOString()]);
  Logger.info(`–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—Ä–æ–º—ñ–∂–∫–∏ ${prettyChunks.join(', ')}`);
  return chunks;
}

function getTransactions(account, from, to) {
  var transactions = [];
  var newFrom = from;
  var transactionsCnt;
  
  Logger.info(`–û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É ${account} –∑–∞ –ø–µ—Ä—ñ–æ–¥ (${new Date(newFrom).toISOString()}, ${new Date(to).toISOString()})`);

  do {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–µ–∫–∞—Ç–∏
    if (lastApiRequest) {
      let currentTime = Date.now();
      let timeSinceLastRequest = currentTime - lastApiRequest;
      let waitTime = Math.max(61000 - timeSinceLastRequest, 0); // –ú—ñ–Ω—ñ–º—É–º 0 –º—Å

      if (waitTime > 0) {
        Logger.info(`–ß–µ–∫–∞—î–º–æ ${Math.round(waitTime/1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º`);
        Utilities.sleep(waitTime);
      }
    }
    
    // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
    let newTransactions = makeRequest(account, newFrom, to);
    lastApiRequest = Date.now();

    if (newTransactions.length == 0) break;
    
    newFrom = newTransactions.at(-1).time;
    transactionsCnt = newTransactions.length;
    transactions.push(newTransactions);
  } while (transactionsCnt == 500);

  return transactions.flat();
}

function makeRequest(account, from, to) {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π account
  let account_id = getScriptSecret(account);
  let URL_STRING = `https://api.monobank.ua/personal/statement/${account}/${from}/${to}`;
  let options = {
    'method': 'get',
    'headers': { 'X-Token': MONO_TOKEN },
    'muteHttpExceptions': true
  };
  Logger.log(`–†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç: ${URL_STRING}`);

  let response = UrlFetchApp.fetch(URL_STRING, options);
  let responseCode = response.getResponseCode();
  let json = response.getContentText();

  if (responseCode == 429) {
    throw new Error('–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É. –ü–æ—á–µ–∫–∞–π—Ç–µ 1 —Ö–≤–∏–ª–∏–Ω—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');
  } else if (responseCode >= 300) {
    throw new Error(`${responseCode}: ${json}`);
  }

  let transactions = JSON.parse(json).map(MonoTransaction.fromJSON);

  return transactions
}

function getScriptSecret(key) {
  let secret = PropertiesService.getScriptProperties().getProperty(key);
  if (!secret) throw Error(`–ö–ª—é—á ${key} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ "–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Å–∫—Ä–∏–ø—Ç–∞"`);
  return secret;
}

class MonoTransaction {
  constructor({
    time,
    description,
    mcc,
    originalMcc,
    amount,
    cashbackAmount,
    balance,
    comment,
    source
  }) {
    // –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ epoch seconds –≤ timestamp, –∞ –∫–æ–ø—ñ–π–∫–∏ –≤ –≥—Ä–∏–≤–Ω—ñ
    this.time = new Date(time * 1000);
    this.amount = amount / -100;
    this.cashbackAmount = cashbackAmount / 100;
    this.description = description;
    this.mcc = mcc;
    this.originalMcc = originalMcc;
    this.comment = comment;
    this.balance = balance / 100;

    this.source = source || 'Mono';
    this.category = '–Ü–Ω—à–µ';
  }

  columnMap(){
     return new Map([
      ["–î–∂–µ—Ä–µ–ª–æ", this.source],
      ["–ë–∞–ª–∞–Ω—Å", this.balance],
      ["–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", this.amount],
      ["–ö–µ—à–±–µ–∫", this.cashbackAmount],
      ["–û–ø–∏—Å", this.description],
      ["MCC", this.mcc],
      ["Original MCC", this.originalMcc],
      ["–ö–æ–º–µ–Ω—Ç–∞—Ä", this.comment],
      ["–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", this.time],
      ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", this.category],
    ])
  }

  static fromJSON(json) {
    return new MonoTransaction({
      time: json.time,
      description: json.description,
      mcc: json.mcc,
      originalMcc: json.originalMcc,
      amount: json.amount,
      cashbackAmount: json.cashbackAmount,
      balance: json.balance,
      comment: json.comment,
      source: json.source
    }
    );
  }
}

function uploadTransactionsForCustomPeriod() {
  var ui = SpreadsheetApp.getUi();
  
  // –ó–∞–ø–∏—Ç—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
  var fromResponse = ui.prompt(
    '–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å',
    '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY HH:mm',
    ui.ButtonSet.OK_CANCEL);
  
  if (fromResponse.getSelectedButton() != ui.Button.OK) return;
  
  // –ó–∞–ø–∏—Ç—É—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
  var toResponse = ui.prompt(
    '–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å',
    '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∫—ñ–Ω—Ü—è —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY HH:mm',
    ui.ButtonSet.OK_CANCEL);
  
  if (toResponse.getSelectedButton() != ui.Button.OK) return;
  
  // –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç–∏
  var from = parseDateTime(fromResponse.getResponseText());
  var to = parseDateTime(toResponse.getResponseText());
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç
  if (!from || !to) {
    ui.alert('–ü–æ–º–∏–ª–∫–∞', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:mm', ui.ButtonSet.OK);
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—ñ–æ–¥
  var daysDiff = Math.ceil((to - from) / (1000 * 60 * 60 * 24));
  if (daysDiff > 90) {
    ui.alert('–ü–æ–º–∏–ª–∫–∞', '–ü–µ—Ä—ñ–æ–¥ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 90 –¥–Ω—ñ–≤', ui.ButtonSet.OK);
    return;
  }
  
  if (to < from) {
    ui.alert('–ü–æ–º–∏–ª–∫–∞', '–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó', ui.ButtonSet.OK);
    return;
  }
  
  uploadTransactionsForPeriod(from.getTime(), to.getTime());
}

function parseDateTime(dateTimeStr) {
  // –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: "DD.MM.YYYY HH:mm"
  try {
    const [dateStr, timeStr] = dateTimeStr.split(' ');
    const [day, month, year] = dateStr.split('.');
    const [hours, minutes] = timeStr.split(':');
    
    // –ú—ñ—Å—è—Ü—ñ –≤ JavaScript –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 0
    const date = new Date(year, month - 1, day, hours, minutes);
    
    return isNaN(date.getTime()) ? null : date;
  } catch (e) {
    return null;
  }
}

function uploadTransactionsForPeriod(from, to) {
  try {
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –æ–¥–∏–Ω —Ä–∞–∑
    const { rules, indices } = getRules("–ü—Ä–∞–≤–∏–ª–∞");
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ä–∞—Ö—É–Ω–∫—É
    accounts.forEach(({ account, source }) => {
      Logger.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É: ${source}`);
      
      let periods = getTimePeriods(from, to);
      
      periods.forEach(([periodFrom, periodTo]) => {
        let transactions = getTransactions(account, periodFrom, periodTo);
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        for (let step = transactions.length - 1; step >= 0; step--) {
          let transaction = transactions[step];
          transaction.source = source;
          
          // –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
          let entry = headers.map(col => {
            if (col === "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó") {
              return getCategoryNameByMCC(transaction.mcc);
            } else {
              return transaction.columnMap().get(col);
            }
          });
          
          // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ –æ–¥–Ω—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
          let updatedEntry = applyRulesToTransactionsData(
            [entry],
            headers,
            rules,
            indices
          )[0];
          
          // –®—É–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
          let insertPosition = 2;
          let currentData = sheet.getDataRange().getValues();
          currentData.shift();
          
          let timestampIndex = headers.indexOf("–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
          let transactionDate = new Date(transaction.time);
          
          while (insertPosition - 1 < currentData.length) {
            let currentRowDate = new Date(currentData[insertPosition - 2][timestampIndex]);
            if (transactionDate > currentRowDate) {
              break;
            }
            insertPosition++;
          }
          
          sheet.insertRowBefore(insertPosition);
          sheet.getRange(insertPosition, 1, 1, updatedEntry.length).setValues([updatedEntry]);
        }
      });
    });
    
    SpreadsheetApp.getUi().alert("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!");
  } catch (e) {
    SpreadsheetApp.getUi().alert(`–ü–æ–º–∏–ª–∫–∞: ${e.message}`);
  }
}